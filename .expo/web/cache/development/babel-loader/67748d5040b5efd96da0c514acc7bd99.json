{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\react native\\\\crypto_currency\\\\components\\\\SingleCurrency.js\";\n\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph, StackedBarChart } from \"react-native-chart-kit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { currencyDetail } from \"../actions/currencyActions\";\nimport TabNavigator from 'react-native-tab-navigator';\n\nvar SingleCurrency = function SingleCurrency(props) {\n  var _props$route$params = props.route.params,\n      id = _props$route$params.id,\n      price = _props$route$params.price;\n  var dispatch = useDispatch();\n  var currencyDetails = useSelector(function (state) {\n    return state.currencyDetails;\n  });\n  var loading = currencyDetails.loading,\n      currency = currencyDetails.currency,\n      error = currencyDetails.error;\n  var result = [];\n  var dates = [];\n  var prices = [];\n  var nowHour = new Date().getHours();\n\n  for (var i = nowHour; i <= 24; i++) {\n    if (i > 12) {\n      result.push(i + \"PM\");\n    } else {\n      result.push(i + \"AM\");\n    }\n  }\n\n  var decimals = function decimals(num) {\n    var number = Number(num).toFixed(2);\n    return number;\n  };\n\n  function msToTime(duration) {\n    var seconds = Math.floor(duration / 1000 % 60),\n        minutes = Math.floor(duration / (1000 * 60) % 60),\n        hours = Math.floor(duration / (1000 * 60 * 60) % 24);\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return hours + \":\" + minutes;\n  }\n\n  useEffect(function () {\n    dispatch(currencyDetail(id));\n  }, [dispatch]);\n  return React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      padding: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, id.toUpperCase()), React.createElement(Text, {\n    style: {\n      fontSize: 20,\n      padding: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, price));\n};\n\nexport default SingleCurrency;","map":{"version":3,"sources":["D:/react native/crypto_currency/components/SingleCurrency.js"],"names":["React","useEffect","LineChart","BarChart","PieChart","ProgressChart","ContributionGraph","StackedBarChart","useDispatch","useSelector","currencyDetail","TabNavigator","SingleCurrency","props","route","params","id","price","dispatch","currencyDetails","state","loading","currency","error","result","dates","prices","nowHour","Date","getHours","i","push","decimals","num","number","Number","toFixed","msToTime","duration","seconds","Math","floor","minutes","hours","alignItems","fontSize","padding","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { View, Text, Dimensions } from \"react-native\";\r\nimport {\r\n  LineChart,\r\n  BarChart,\r\n  PieChart,\r\n  ProgressChart,\r\n  ContributionGraph,\r\n  StackedBarChart,\r\n} from \"react-native-chart-kit\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { currencyDetail } from \"../actions/currencyActions\";\r\nimport TabNavigator from 'react-native-tab-navigator';\r\n\r\nconst SingleCurrency = (props) => {\r\n  const { id, price } = props.route.params;\r\n  const dispatch = useDispatch();\r\n  const currencyDetails = useSelector((state) => state.currencyDetails);\r\n  const { loading, currency, error } = currencyDetails;\r\n\r\n  var result = [];\r\n  let dates = [];\r\n  let prices = [];\r\n  var nowHour = new Date().getHours();\r\n\r\n  for (var i = nowHour; i <= 24; i++) {\r\n    if (i > 12) {\r\n      result.push(i + \"PM\");\r\n    } else {\r\n      result.push(i + \"AM\");\r\n    }\r\n  }\r\n\r\n  const decimals = (num) => {\r\n    let number = Number(num).toFixed(2);\r\n    return number;\r\n  };\r\n\r\n  function msToTime(duration) {\r\n    var seconds = Math.floor((duration / 1000) % 60),\r\n      minutes = Math.floor((duration / (1000 * 60)) % 60),\r\n      hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n\r\n    hours = hours < 10 ? \"0\" + hours : hours;\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return hours + \":\" + minutes;\r\n  }\r\n\r\n  // currency.map((dataC) => {\r\n  //   const time = msToTime(dataC.time);\r\n  //   dates.push(time.time);\r\n  //   prices.push(decimals(dataC.priceUsd));\r\n  // });\r\n  useEffect(() => {\r\n    dispatch(currencyDetail(id));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <Text style={{ fontSize: 20, padding: 20 }}>{id.toUpperCase()}</Text>\r\n      <Text style={{ fontSize: 20, padding: 20 }}>{price}</Text>\r\n      {/* <LineChart\r\n        data={{\r\n          labels: dates,\r\n          datasets: [\r\n            {\r\n              data: prices,\r\n            },\r\n          ],\r\n        }}\r\n        width={Dimensions.get(\"window\").width - 35} // from react-native\r\n        height={300}\r\n        yAxisLabel=\"$\"\r\n        yAxisSuffix=\"k\"\r\n        yAxisInterval={1} // optional, defaults to 1\r\n        chartConfig={{\r\n          backgroundColor: \"#e26a00\",\r\n          backgroundGradientFrom: \"#003f5c\",\r\n          backgroundGradientTo: \"#003f5c\",\r\n          decimalPlaces: 2, // optional, defaults to 2dp\r\n          color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n          labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n          style: {\r\n            borderRadius: 16,\r\n          },\r\n          propsForDots: {\r\n            r: \"6\",\r\n            strokeWidth: \".5\",\r\n            stroke: \"#ffa726\",\r\n          },\r\n        }}\r\n        bezier\r\n        style={{\r\n          marginVertical: 8,\r\n          borderRadius: 16,\r\n        }}\r\n      /> */}\r\n      \r\n      \r\n    </View>\r\n  );\r\n};\r\nexport default SingleCurrency;\r\n"]},"metadata":{},"sourceType":"module"}