{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/constants\";\nimport firebase from \"../configs/firebase\";\nexport var register = function register(email, password) {\n  return function _callee(dispatch) {\n    var _ref, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              dispatch({\n                type: USER_REGISTER_REQUEST\n              });\n              _ref = {}, data = _ref.data;\n              firebase.auth().createUserWithEmailAndPassword(email, password).then(function (data) {\n                dispatch({\n                  type: USER_REGISTER_SUCCESS,\n                  payload: data.user\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: USER_REGISTER_FAIL,\n                payload: error.response && error.response.data.message ? error.response.data.message : error.message\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/react native/crypto_currency/actions/userActions.js"],"names":["USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","firebase","register","email","password","dispatch","type","data","auth","createUserWithEmailAndPassword","then","payload","user","error","response","message"],"mappings":";AAAA,SACEA,kBADF,EAEEC,qBAFF,EAGEC,qBAHF;AAKA,OAAOC,QAAP;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3C,gBAAI;AACFA,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAEP;AADC,eAAD,CAAR;AADE,qBAIO,EAJP,EAICQ,IAJD,QAICA,IAJD;AAKDN,cAAAA,QAAQ,CACNO,IADF,GAEEC,8BAFF,CAEiCN,KAFjC,EAEwCC,QAFxC,EAGEM,IAHF,CAGO,UAACH,IAAD,EAAU;AACdF,gBAAAA,QAAQ,CAAC;AACPC,kBAAAA,IAAI,EAAEN,qBADC;AAEPW,kBAAAA,OAAO,EAAEJ,IAAI,CAACK;AAFP,iBAAD,CAAR;AAID,eARF;AAqBF,aA1BD,CA0BE,OAAOC,KAAP,EAAc;AACdR,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAER,kBADC;AAEPa,gBAAAA,OAAO,EACLE,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeP,IAAf,CAAoBQ,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeP,IAAf,CAAoBQ,OADxB,GAEIF,KAAK,CAACE;AALL,eAAD,CAAR;AAOD;;AAnC0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;AAAA,CAAjB","sourcesContent":["import {\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n} from \"../constants/constants\";\r\nimport firebase from \"../configs/firebase\";\r\nexport const register = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    });\r\nconst {data}={}\r\n     firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((data) => {\r\n        dispatch({\r\n          type: USER_REGISTER_SUCCESS,\r\n          payload: data.user,\r\n        });\r\n      });\r\n\r\n    // dispatch({\r\n    //   type: USER_REGISTER_SUCCESS,\r\n    //   payload: data,\r\n    // });\r\n\r\n    //   dispatch({\r\n    //     type: USER_LOGIN_SUCCESS,\r\n    //     payload: data,\r\n    //   });\r\n\r\n    // localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}