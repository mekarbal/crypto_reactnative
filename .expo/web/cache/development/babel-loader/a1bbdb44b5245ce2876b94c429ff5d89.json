{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/constants\";\nimport firebase from \"../configs/firebase\";\nexport var register = function register(email, password) {\n  return function _callee(dispatch) {\n    var _firebase$auth$create, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              dispatch({\n                type: USER_REGISTER_REQUEST\n              });\n              _firebase$auth$create = firebase.auth().createUserWithEmailAndPassword(email, password).then(function (data) {}), data = _firebase$auth$create.data;\n            } catch (error) {\n              dispatch({\n                type: USER_REGISTER_FAIL,\n                payload: error.response && error.response.data.message ? error.response.data.message : error.message\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/react native/crypto_currency/actions/userActions.js"],"names":["USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","firebase","register","email","password","dispatch","type","auth","createUserWithEmailAndPassword","then","data","error","payload","response","message"],"mappings":";AAAA,SACEA,kBADF,EAEEC,qBAFF,EAGEC,qBAHF;AAKA,OAAOC,QAAP;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3C,gBAAI;AACFA,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAEP;AADC,eAAD,CAAR;AADE,sCAKDE,QAAQ,CACNM,IADF,GAEEC,8BAFF,CAEiCL,KAFjC,EAEwCC,QAFxC,EAGEK,IAHF,CAGO,UAACC,IAAD,EAAU,CAMf,CATF,CALC,EAICA,IAJD,yBAICA,IAJD;AA2BH,aA3BD,CA2BE,OAAOC,KAAP,EAAc;AACdN,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAER,kBADC;AAEPc,gBAAAA,OAAO,EACLD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,OAAtC,GACIH,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,OADxB,GAEIH,KAAK,CAACG;AALL,eAAD,CAAR;AAOD;;AApC0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;AAAA,CAAjB","sourcesContent":["import {\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n} from \"../constants/constants\";\r\nimport firebase from \"../configs/firebase\";\r\nexport const register = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    });\r\nconst {data}=\r\n     firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((data) => {\r\n        // dispatch({\r\n        //   type: USER_REGISTER_SUCCESS,\r\n        //   payload: data.user,\r\n        // });\r\n        \r\n      });\r\n\r\n    // dispatch({\r\n    //   type: USER_REGISTER_SUCCESS,\r\n    //   payload: data,\r\n    // });\r\n\r\n    //   dispatch({\r\n    //     type: USER_LOGIN_SUCCESS,\r\n    //     payload: data,\r\n    //   });\r\n\r\n    // localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}