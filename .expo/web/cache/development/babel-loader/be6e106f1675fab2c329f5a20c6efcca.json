{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { CURRENCY_DETAILS_BY_USER_FAIL, CURRENCY_DETAILS_BY_USER_REQUEST, CURRENCY_DETAILS_BY_USER_SUCCESS, CURRENCY_DETAILS_FAIL, CURRENCY_DETAILS_REQUEST, CURRENCY_DETAILS_SUCCESS, CURRENCY_LIST_FAIL, CURRENCY_LIST_REQUEST, CURRENCY_LIST_SUCCESS, CURRENCY_REGISTER_FAIL, CURRENCY_REGISTER_REQUEST, CURRENCY_REGISTER_SUCCESS } from \"../constants/constants\";\nexport var listCurrencies = function listCurrencies() {\n  return function _callee(dispatch) {\n    var _await$axios$get, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch({\n              type: CURRENCY_LIST_REQUEST\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(\"https://api.coingecko.com/api/v3/coins\"));\n\n          case 4:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            dispatch({\n              type: CURRENCY_LIST_SUCCESS,\n              payload: data\n            });\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: CURRENCY_LIST_FAIL,\n              payload: _context.t0.message\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\nexport var currencyDetail = function currencyDetail(id) {\n  return function _callee2(dispatch) {\n    var _await$axios$get2, data;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch({\n              type: CURRENCY_DETAILS_REQUEST\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(\"https://api.coincap.io/v2/assets/\" + id + \"/history?interval=h2&start=\" + (Date.now() - 85800000) + \"&end=\" + Date.now()));\n\n          case 4:\n            _await$axios$get2 = _context2.sent;\n            data = _await$axios$get2.data;\n            dispatch({\n              type: CURRENCY_DETAILS_SUCCESS,\n              payload: data.data\n            });\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: CURRENCY_DETAILS_FAIL,\n              payload: _context2.t0\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\nexport var currencyRegister = function currencyRegister(id, cryp_name, value, currencyPrice) {\n  return function _callee3(dispatch) {\n    var config, _await$axios$post, data;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            config = {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            };\n            _context3.prev = 1;\n            dispatch({\n              type: CURRENCY_REGISTER_REQUEST\n            });\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"http://localhost:3000/wallet/add\", {\n              id: \"\" + id,\n              cryp_name: cryp_name,\n              value: value,\n              currencyPrice: currencyPrice\n            }));\n\n          case 5:\n            _await$axios$post = _context3.sent;\n            data = _await$axios$post.data;\n            console.log(data);\n            dispatch({\n              type: CURRENCY_REGISTER_SUCCESS,\n              payload: data\n            });\n            _context3.next = 14;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](1);\n            dispatch({\n              type: CURRENCY_REGISTER_FAIL,\n              payload: _context3.t0.response && _context3.t0.response.data.message ? _context3.t0.response.data.message : _context3.t0.message\n            });\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n};\nexport var currencySell = function currencySell(id, cryp_name, value, currencyPrice) {\n  return function _callee4(dispatch) {\n    var config, _await$axios$post2, data;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            config = {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            };\n            _context4.prev = 1;\n            dispatch({\n              type: CURRENCY_REGISTER_REQUEST\n            });\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"http://localhost:3000/wallet/sell\", {\n              idUser: \"\" + id,\n              currencyName: cryp_name,\n              value: value,\n              currencyPrice: currencyPrice\n            }));\n\n          case 5:\n            _await$axios$post2 = _context4.sent;\n            data = _await$axios$post2.data;\n            console.log(data);\n            dispatch({\n              type: CURRENCY_REGISTER_SUCCESS,\n              payload: data\n            });\n            _context4.next = 14;\n            break;\n\n          case 11:\n            _context4.prev = 11;\n            _context4.t0 = _context4[\"catch\"](1);\n            dispatch({\n              type: CURRENCY_REGISTER_FAIL,\n              payload: _context4.t0.response && _context4.t0.response.data.message ? _context4.t0.response.data.message : _context4.t0.message\n            });\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n};\nexport var sendMail = function sendMail(to, subject, text, value, currencyPrice) {\n  return function _callee5(dispatch) {\n    var config, _await$axios$post3, data;\n\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            config = {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            };\n            _context5.prev = 1;\n            dispatch({\n              type: CURRENCY_REGISTER_REQUEST\n            });\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"http://localhost:3000/wallet/sell\", {\n              idUser: \"\" + id,\n              currencyName: cryp_name,\n              value: value,\n              currencyPrice: currencyPrice\n            }));\n\n          case 5:\n            _await$axios$post3 = _context5.sent;\n            data = _await$axios$post3.data;\n            console.log(data);\n            dispatch({\n              type: CURRENCY_REGISTER_SUCCESS,\n              payload: data\n            });\n            _context5.next = 14;\n            break;\n\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5[\"catch\"](1);\n            dispatch({\n              type: CURRENCY_REGISTER_FAIL,\n              payload: _context5.t0.response && _context5.t0.response.data.message ? _context5.t0.response.data.message : _context5.t0.message\n            });\n\n          case 14:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n};\nexport var currencyDetailsByUserId = function currencyDetailsByUserId(id) {\n  return function _callee6(dispatch) {\n    var _await$axios$get3, data;\n\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            dispatch({\n              type: CURRENCY_DETAILS_BY_USER_REQUEST\n            });\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(\"http://localhost:3000/wallet/\" + id));\n\n          case 4:\n            _await$axios$get3 = _context6.sent;\n            data = _await$axios$get3.data;\n            dispatch({\n              type: CURRENCY_DETAILS_BY_USER_SUCCESS,\n              payload: data\n            });\n            _context6.next = 12;\n            break;\n\n          case 9:\n            _context6.prev = 9;\n            _context6.t0 = _context6[\"catch\"](0);\n            dispatch({\n              type: CURRENCY_DETAILS_BY_USER_FAIL,\n              payload: _context6.t0\n            });\n\n          case 12:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};","map":{"version":3,"sources":["D:/react native/Crypto/crypto_currency/actions/currencyActions.js"],"names":["axios","CURRENCY_DETAILS_BY_USER_FAIL","CURRENCY_DETAILS_BY_USER_REQUEST","CURRENCY_DETAILS_BY_USER_SUCCESS","CURRENCY_DETAILS_FAIL","CURRENCY_DETAILS_REQUEST","CURRENCY_DETAILS_SUCCESS","CURRENCY_LIST_FAIL","CURRENCY_LIST_REQUEST","CURRENCY_LIST_SUCCESS","CURRENCY_REGISTER_FAIL","CURRENCY_REGISTER_REQUEST","CURRENCY_REGISTER_SUCCESS","listCurrencies","dispatch","type","get","data","payload","message","currencyDetail","id","Date","now","currencyRegister","cryp_name","value","currencyPrice","config","headers","post","console","log","response","currencySell","idUser","currencyName","sendMail","to","subject","text","currencyDetailsByUserId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  CURRENCY_DETAILS_BY_USER_FAIL,\r\n  CURRENCY_DETAILS_BY_USER_REQUEST,\r\n  CURRENCY_DETAILS_BY_USER_SUCCESS,\r\n  CURRENCY_DETAILS_FAIL,\r\n  CURRENCY_DETAILS_REQUEST,\r\n  CURRENCY_DETAILS_SUCCESS,\r\n  CURRENCY_LIST_FAIL,\r\n  CURRENCY_LIST_REQUEST,\r\n  CURRENCY_LIST_SUCCESS,\r\n  CURRENCY_REGISTER_FAIL,\r\n  CURRENCY_REGISTER_REQUEST,\r\n  CURRENCY_REGISTER_SUCCESS,\r\n} from \"../constants/constants\";\r\n\r\nexport const listCurrencies = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: CURRENCY_LIST_REQUEST });\r\n\r\n    const { data } = await axios.get(\"https://api.coingecko.com/api/v3/coins\");\r\n\r\n    dispatch({ type: CURRENCY_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: CURRENCY_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\nexport const currencyDetail = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: CURRENCY_DETAILS_REQUEST });\r\n    const { data } = await axios.get(\r\n      `https://api.coincap.io/v2/assets/${id}/history?interval=h2&start=${\r\n        Date.now() - 85800000\r\n      }&end=${Date.now()}`\r\n    );\r\n\r\n    dispatch({\r\n      type: CURRENCY_DETAILS_SUCCESS,\r\n      payload: data.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CURRENCY_DETAILS_FAIL,\r\n      payload: error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const currencyRegister =\r\n  (id, cryp_name, value, currencyPrice) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      dispatch({ type: CURRENCY_REGISTER_REQUEST });\r\n\r\n      const { data } = await axios.post(\"http://localhost:3000/wallet/add\", {\r\n        id: `${id}`,\r\n        cryp_name: cryp_name,\r\n        value: value,\r\n        currencyPrice: currencyPrice,\r\n      });\r\n\r\n      console.log(data);\r\n      dispatch({ type: CURRENCY_REGISTER_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CURRENCY_REGISTER_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n  \r\n  \r\nexport const currencySell =\r\n  (id, cryp_name, value, currencyPrice) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      dispatch({ type: CURRENCY_REGISTER_REQUEST });\r\n\r\n      const { data } = await axios.post(\"http://localhost:3000/wallet/sell\", {\r\n        idUser: `${id}`,\r\n        currencyName: cryp_name,\r\n        value: value,\r\n        currencyPrice: currencyPrice,\r\n      });\r\n\r\n      console.log(data);\r\n      dispatch({ type: CURRENCY_REGISTER_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CURRENCY_REGISTER_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\nexport const sendMail =\r\n  (to, subject,text, value, currencyPrice) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      dispatch({ type: CURRENCY_REGISTER_REQUEST });\r\n\r\n      const { data } = await axios.post(\"http://localhost:3000/wallet/sell\", {\r\n        idUser: `${id}`,\r\n        currencyName: cryp_name,\r\n        value: value,\r\n        currencyPrice: currencyPrice,\r\n      });\r\n\r\n      console.log(data);\r\n      dispatch({ type: CURRENCY_REGISTER_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CURRENCY_REGISTER_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const currencyDetailsByUserId = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: CURRENCY_DETAILS_BY_USER_REQUEST });\r\n    const { data } = await axios.get(`http://localhost:3000/wallet/${id}`);\r\n\r\n    dispatch({\r\n      type: CURRENCY_DETAILS_BY_USER_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CURRENCY_DETAILS_BY_USER_FAIL,\r\n      payload: error,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}